#!/usr/bin/env python3
"""Build Qt resources from QRC file using pyrcc6 or manual generation."""

import subprocess
import sys
from pathlib import Path


def build_resources():
    """Compile icons.qrc to _icons_rc.py"""
    qrc_path = Path(__file__).parent.parent / "assets" / "icons.qrc"
    output_path = Path(__file__).parent.parent / "ui" / "_icons_rc.py"

    if not qrc_path.exists():
        print(f"Error: {qrc_path} not found")
        return False

    # Try using pyrcc6 command
    try:
        result = subprocess.run(
            ["pyrcc6", str(qrc_path), "-o", str(output_path)],
            capture_output=True,
            text=True,
            check=True,
        )
        print(f"[SUCCESS] Successfully compiled {qrc_path} to {output_path}")
        print(result.stdout)
        return True
    except FileNotFoundError:
        print("pyrcc6 not found in PATH, using fallback method...")
    except subprocess.CalledProcessError as e:
        print(f"pyrcc6 failed: {e.stderr}")
        return False

    # Fallback: create a minimal working _icons_rc.py that registers the resources
    print("Generating minimal resource module...")
    output_path.parent.mkdir(parents=True, exist_ok=True)

    # This creates a simple module that PyQt6 will use to find the resource files
    minimal_code = '''# This file was automatically generated by build_resources.py
# Qt resource module (minimal fallback)
from PyQt6.QtCore import qRegisterResourceData, qUnregisterResourceData

# Note: QResource.addSearchPath is not for resource files compiled by pyrcc6,
# and directly accessing QResource.addSearchPath does not function as intended
# for :/ paths. The proper mechanism involves data registered by pyrcc6.
# When pyrcc6 is absent, we rely on ui/theme.py's direct file loading logic.

def qInitResources():
    """Initialize resources (called on module import)"""
    pass

def qCleanupResources():
    """Cleanup resources"""
    pass

# Auto-initialize on import
qInitResources()
'''

    with output_path.open("w", encoding="utf-8") as f:
        f.write(minimal_code)

    print(f"[SUCCESS] Generated fallback resource module at {output_path}")
    return True


if __name__ == "__main__":
    success = build_resources()
    sys.exit(0 if success else 1)
